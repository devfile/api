{
  "description": "DevWorkspace is the Schema for the devworkspaces API\n\nIDE-targeted variants of the schemas provide the following difference compared to the main schemas:\n- They contain additional non-standard `markdownDescription` attributes that are used by IDEs such a VSCode\nto provide markdown-rendered documentation hovers. \n- They don't contain `default` attributes, since this triggers unwanted addition of defaulted fields during completion in IDEs.",
  "type": "object",
  "title": "DevWorkspace schema - Version 2.2.0-alpha - IDE-targeted variant",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string",
      "markdownDescription": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string",
      "markdownDescription": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "markdownDescription": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string",
          "markdownDescription": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string",
          "format": "date-time",
          "markdownDescription": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64",
          "markdownDescription": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string",
          "format": "date-time",
          "markdownDescription": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string",
          "markdownDescription": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64",
          "markdownDescription": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "markdownDescription": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": "string",
                "markdownDescription": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": "string",
                "markdownDescription": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
              },
              "fieldsV1": {
                "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
                "type": "object",
                "additionalProperties": true,
                "markdownDescription": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": "string",
                "markdownDescription": "Manager is an identifier of the workflow managing these fields."
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": "string",
                "markdownDescription": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
              },
              "time": {
                "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
                "type": "string",
                "format": "date-time",
                "markdownDescription": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
              }
            },
            "additionalProperties": false,
            "markdownDescription": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
          },
          "markdownDescription": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string",
          "markdownDescription": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string",
          "markdownDescription": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": "object",
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string",
                "markdownDescription": "API version of the referent."
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": "boolean",
                "markdownDescription": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": "boolean",
                "markdownDescription": "If true, this reference points to the managing controller."
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string",
                "markdownDescription": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string",
                "markdownDescription": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string",
                "markdownDescription": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
              }
            },
            "additionalProperties": false,
            "markdownDescription": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field."
          },
          "markdownDescription": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string",
          "markdownDescription": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string",
          "markdownDescription": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string",
          "markdownDescription": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
    },
    "spec": {
      "description": "DevWorkspaceSpec defines the desired state of DevWorkspace",
      "type": "object",
      "required": [
        "started"
      ],
      "properties": {
        "contributions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "oneOf": [
              {
                "required": [
                  "uri"
                ]
              },
              {
                "required": [
                  "id"
                ]
              },
              {
                "required": [
                  "kubernetes"
                ]
              }
            ],
            "properties": {
              "attributes": {
                "description": "Map of implementation-dependant free-form YAML attributes.",
                "type": "object",
                "additionalProperties": true,
                "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
              },
              "commands": {
                "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "oneOf": [
                    {
                      "required": [
                        "exec"
                      ]
                    },
                    {
                      "required": [
                        "apply"
                      ]
                    },
                    {
                      "required": [
                        "composite"
                      ]
                    }
                  ],
                  "properties": {
                    "apply": {
                      "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                      "type": "object",
                      "properties": {
                        "component": {
                          "description": "Describes component that will be applied",
                          "type": "string",
                          "markdownDescription": "Describes component that will be applied"
                        },
                        "group": {
                          "description": "Defines the group this command is part of",
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "description": "Identifies the default command for a given group kind",
                              "type": "boolean",
                              "markdownDescription": "Identifies the default command for a given group kind"
                            },
                            "kind": {
                              "description": "Kind of group the command is part of",
                              "type": "string",
                              "enum": [
                                "build",
                                "run",
                                "test",
                                "debug",
                                "deploy"
                              ],
                              "markdownDescription": "Kind of group the command is part of"
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Defines the group this command is part of"
                        },
                        "label": {
                          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                          "type": "string",
                          "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."
                    },
                    "attributes": {
                      "description": "Map of implementation-dependant free-form YAML attributes.",
                      "type": "object",
                      "additionalProperties": true,
                      "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                    },
                    "composite": {
                      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                      "type": "object",
                      "properties": {
                        "commands": {
                          "description": "The commands that comprise this composite command",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "The commands that comprise this composite command"
                        },
                        "group": {
                          "description": "Defines the group this command is part of",
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "description": "Identifies the default command for a given group kind",
                              "type": "boolean",
                              "markdownDescription": "Identifies the default command for a given group kind"
                            },
                            "kind": {
                              "description": "Kind of group the command is part of",
                              "type": "string",
                              "enum": [
                                "build",
                                "run",
                                "test",
                                "debug",
                                "deploy"
                              ],
                              "markdownDescription": "Kind of group the command is part of"
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Defines the group this command is part of"
                        },
                        "label": {
                          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                          "type": "string",
                          "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                        },
                        "parallel": {
                          "description": "Indicates if the sub-commands should be executed concurrently",
                          "type": "boolean",
                          "markdownDescription": "Indicates if the sub-commands should be executed concurrently"
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Composite command that allows executing several sub-commands either sequentially or concurrently"
                    },
                    "exec": {
                      "description": "CLI Command executed in an existing component container",
                      "type": "object",
                      "properties": {
                        "commandLine": {
                          "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                          "type": "string",
                          "markdownDescription": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                        },
                        "component": {
                          "description": "Describes component to which given action relates",
                          "type": "string",
                          "markdownDescription": "Describes component to which given action relates"
                        },
                        "env": {
                          "description": "Optional list of environment variables that have to be set before running the command",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "markdownDescription": "Optional list of environment variables that have to be set before running the command"
                        },
                        "group": {
                          "description": "Defines the group this command is part of",
                          "type": "object",
                          "properties": {
                            "isDefault": {
                              "description": "Identifies the default command for a given group kind",
                              "type": "boolean",
                              "markdownDescription": "Identifies the default command for a given group kind"
                            },
                            "kind": {
                              "description": "Kind of group the command is part of",
                              "type": "string",
                              "enum": [
                                "build",
                                "run",
                                "test",
                                "debug",
                                "deploy"
                              ],
                              "markdownDescription": "Kind of group the command is part of"
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Defines the group this command is part of"
                        },
                        "hotReloadCapable": {
                          "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`",
                          "type": "boolean",
                          "markdownDescription": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`"
                        },
                        "label": {
                          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                          "type": "string",
                          "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                        },
                        "workingDir": {
                          "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                          "type": "string",
                          "markdownDescription": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "CLI Command executed in an existing component container"
                    },
                    "id": {
                      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                      "type": "string",
                      "maxLength": 63,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "markdownDescription": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."
                    }
                  },
                  "additionalProperties": false
                },
                "markdownDescription": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
              },
              "components": {
                "description": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "oneOf": [
                    {
                      "required": [
                        "container"
                      ]
                    },
                    {
                      "required": [
                        "kubernetes"
                      ]
                    },
                    {
                      "required": [
                        "openshift"
                      ]
                    },
                    {
                      "required": [
                        "volume"
                      ]
                    },
                    {
                      "required": [
                        "image"
                      ]
                    }
                  ],
                  "properties": {
                    "attributes": {
                      "description": "Map of implementation-dependant free-form YAML attributes.",
                      "type": "object",
                      "additionalProperties": true,
                      "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                    },
                    "container": {
                      "description": "Allows adding and configuring devworkspace-related containers",
                      "type": "object",
                      "properties": {
                        "annotation": {
                          "description": "Annotations that should be added to specific resources for this container",
                          "type": "object",
                          "properties": {
                            "deployment": {
                              "description": "Annotations to be added to deployment",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "markdownDescription": "Annotations to be added to deployment"
                            },
                            "service": {
                              "description": "Annotations to be added to service",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "markdownDescription": "Annotations to be added to service"
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Annotations that should be added to specific resources for this container"
                        },
                        "args": {
                          "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                        },
                        "command": {
                          "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                        },
                        "cpuLimit": {
                          "type": "string"
                        },
                        "cpuRequest": {
                          "type": "string"
                        },
                        "dedicatedPod": {
                          "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`",
                          "type": "boolean",
                          "markdownDescription": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"
                        },
                        "endpoints": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "annotation": {
                                "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                              },
                              "attributes": {
                                "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                "type": "object",
                                "additionalProperties": true,
                                "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                              },
                              "exposure": {
                                "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                "type": "string",
                                "enum": [
                                  "public",
                                  "internal",
                                  "none"
                                ],
                                "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                              },
                              "name": {
                                "type": "string",
                                "maxLength": 63,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              },
                              "path": {
                                "description": "Path of the endpoint URL",
                                "type": "string",
                                "markdownDescription": "Path of the endpoint URL"
                              },
                              "protocol": {
                                "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                "type": "string",
                                "enum": [
                                  "http",
                                  "https",
                                  "ws",
                                  "wss",
                                  "tcp",
                                  "udp"
                                ],
                                "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                              },
                              "secure": {
                                "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                "type": "boolean",
                                "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                              },
                              "targetPort": {
                                "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                "type": "integer",
                                "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "env": {
                          "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "markdownDescription": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"
                        },
                        "image": {
                          "type": "string"
                        },
                        "memoryLimit": {
                          "type": "string"
                        },
                        "memoryRequest": {
                          "type": "string"
                        },
                        "mountSources": {
                          "description": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                          "type": "boolean",
                          "markdownDescription": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."
                        },
                        "sourceMapping": {
                          "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                          "type": "string",
                          "markdownDescription": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."
                        },
                        "volumeMounts": {
                          "description": "List of volumes mounts that should be mounted is this container.",
                          "type": "array",
                          "items": {
                            "description": "Volume that should be mounted to a component container",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                                "type": "string",
                                "maxLength": 63,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                "markdownDescription": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."
                              },
                              "path": {
                                "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`.",
                                "type": "string",
                                "markdownDescription": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Volume that should be mounted to a component container"
                          },
                          "markdownDescription": "List of volumes mounts that should be mounted is this container."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Allows adding and configuring devworkspace-related containers"
                    },
                    "image": {
                      "description": "Allows specifying the definition of an image for outer loop builds",
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "dockerfile"
                          ]
                        },
                        {
                          "required": [
                            "autoBuild"
                          ]
                        }
                      ],
                      "properties": {
                        "autoBuild": {
                          "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                          "type": "boolean",
                          "markdownDescription": "Defines if the image should be built during startup.\n\nDefault value is `false`"
                        },
                        "dockerfile": {
                          "description": "Allows specifying dockerfile type build",
                          "type": "object",
                          "oneOf": [
                            {
                              "required": [
                                "uri"
                              ]
                            },
                            {
                              "required": [
                                "devfileRegistry"
                              ]
                            },
                            {
                              "required": [
                                "git"
                              ]
                            }
                          ],
                          "properties": {
                            "args": {
                              "description": "The arguments to supply to the dockerfile build.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "markdownDescription": "The arguments to supply to the dockerfile build."
                            },
                            "buildContext": {
                              "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                              "type": "string",
                              "markdownDescription": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"
                            },
                            "devfileRegistry": {
                              "description": "Dockerfile's Devfile Registry source",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                  "type": "string",
                                  "markdownDescription": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."
                                },
                                "registryUrl": {
                                  "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                  "type": "string",
                                  "markdownDescription": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Dockerfile's Devfile Registry source"
                            },
                            "git": {
                              "description": "Dockerfile's Git source",
                              "type": "object",
                              "properties": {
                                "checkoutFrom": {
                                  "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                  "type": "object",
                                  "properties": {
                                    "remote": {
                                      "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                      "type": "string",
                                      "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                                    },
                                    "revision": {
                                      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                      "type": "string",
                                      "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                                },
                                "fileLocation": {
                                  "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                  "type": "string",
                                  "markdownDescription": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."
                                },
                                "remotes": {
                                  "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Dockerfile's Git source"
                            },
                            "rootRequired": {
                              "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                              "type": "boolean",
                              "markdownDescription": "Specify if a privileged builder pod is required.\n\nDefault value is `false`"
                            },
                            "uri": {
                              "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                              "type": "string",
                              "markdownDescription": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Allows specifying dockerfile type build"
                        },
                        "imageName": {
                          "description": "Name of the image for the resulting outerloop build",
                          "type": "string",
                          "markdownDescription": "Name of the image for the resulting outerloop build"
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Allows specifying the definition of an image for outer loop builds"
                    },
                    "kubernetes": {
                      "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "uri"
                          ]
                        },
                        {
                          "required": [
                            "inlined"
                          ]
                        }
                      ],
                      "properties": {
                        "deployByDefault": {
                          "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                          "type": "boolean",
                          "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                        },
                        "endpoints": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "annotation": {
                                "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                              },
                              "attributes": {
                                "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                "type": "object",
                                "additionalProperties": true,
                                "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                              },
                              "exposure": {
                                "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                "type": "string",
                                "enum": [
                                  "public",
                                  "internal",
                                  "none"
                                ],
                                "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                              },
                              "name": {
                                "type": "string",
                                "maxLength": 63,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              },
                              "path": {
                                "description": "Path of the endpoint URL",
                                "type": "string",
                                "markdownDescription": "Path of the endpoint URL"
                              },
                              "protocol": {
                                "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                "type": "string",
                                "enum": [
                                  "http",
                                  "https",
                                  "ws",
                                  "wss",
                                  "tcp",
                                  "udp"
                                ],
                                "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                              },
                              "secure": {
                                "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                "type": "boolean",
                                "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                              },
                              "targetPort": {
                                "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                "type": "integer",
                                "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "inlined": {
                          "description": "Inlined manifest",
                          "type": "string",
                          "markdownDescription": "Inlined manifest"
                        },
                        "uri": {
                          "description": "Location in a file fetched from a uri.",
                          "type": "string",
                          "markdownDescription": "Location in a file fetched from a uri."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."
                    },
                    "name": {
                      "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                      "type": "string",
                      "maxLength": 63,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "markdownDescription": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."
                    },
                    "openshift": {
                      "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "uri"
                          ]
                        },
                        {
                          "required": [
                            "inlined"
                          ]
                        }
                      ],
                      "properties": {
                        "deployByDefault": {
                          "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                          "type": "boolean",
                          "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                        },
                        "endpoints": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "annotation": {
                                "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                              },
                              "attributes": {
                                "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                "type": "object",
                                "additionalProperties": true,
                                "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                              },
                              "exposure": {
                                "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                "type": "string",
                                "enum": [
                                  "public",
                                  "internal",
                                  "none"
                                ],
                                "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                              },
                              "name": {
                                "type": "string",
                                "maxLength": 63,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              },
                              "path": {
                                "description": "Path of the endpoint URL",
                                "type": "string",
                                "markdownDescription": "Path of the endpoint URL"
                              },
                              "protocol": {
                                "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                "type": "string",
                                "enum": [
                                  "http",
                                  "https",
                                  "ws",
                                  "wss",
                                  "tcp",
                                  "udp"
                                ],
                                "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                              },
                              "secure": {
                                "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                "type": "boolean",
                                "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                              },
                              "targetPort": {
                                "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                "type": "integer",
                                "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "inlined": {
                          "description": "Inlined manifest",
                          "type": "string",
                          "markdownDescription": "Inlined manifest"
                        },
                        "uri": {
                          "description": "Location in a file fetched from a uri.",
                          "type": "string",
                          "markdownDescription": "Location in a file fetched from a uri."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."
                    },
                    "volume": {
                      "description": "Allows specifying the definition of a volume shared by several other components",
                      "type": "object",
                      "properties": {
                        "ephemeral": {
                          "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                          "type": "boolean",
                          "markdownDescription": "Ephemeral volumes are not stored persistently across restarts. Defaults to false"
                        },
                        "size": {
                          "description": "Size of the volume",
                          "type": "string",
                          "markdownDescription": "Size of the volume"
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Allows specifying the definition of a volume shared by several other components"
                    }
                  },
                  "additionalProperties": false
                },
                "markdownDescription": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
              },
              "id": {
                "description": "Id in a registry that contains a Devfile yaml file",
                "type": "string",
                "markdownDescription": "Id in a registry that contains a Devfile yaml file"
              },
              "kubernetes": {
                "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "markdownDescription": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate"
              },
              "name": {
                "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                "type": "string",
                "maxLength": 63,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                "markdownDescription": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."
              },
              "registryUrl": {
                "description": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.",
                "type": "string",
                "markdownDescription": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."
              },
              "uri": {
                "description": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.",
                "type": "string",
                "markdownDescription": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI."
              },
              "version": {
                "description": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.",
                "type": "string",
                "pattern": "^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$",
                "markdownDescription": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."
              }
            },
            "additionalProperties": false
          }
        },
        "podSpecOverride": {
          "description": "Pod fields to override within the DevWorkspace's Deployment. Fields defined here are strategically merged on top of the Pod template in the deployment, allowing for fine-grained customization of the Pods that are started for this DevWorkspace.",
          "type": "object",
          "properties": {
            "metadata": {
              "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "markdownDescription": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
                },
                "labels": {
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "markdownDescription": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
                }
              },
              "additionalProperties": false,
              "markdownDescription": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
            },
            "spec": {
              "description": "Subset of Pod Spec fields that can be overridden in a DevWorkspace's deployment",
              "type": "object",
              "properties": {
                "activeDeadlineSeconds": {
                  "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
                  "type": "integer",
                  "format": "int64",
                  "markdownDescription": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer."
                },
                "affinity": {
                  "description": "If specified, the pod's scheduling constraints",
                  "type": "object",
                  "properties": {
                    "nodeAffinity": {
                      "description": "Describes node affinity scheduling rules for the pod.",
                      "type": "object",
                      "properties": {
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                          "type": "array",
                          "items": {
                            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                            "type": "object",
                            "required": [
                              "preference",
                              "weight"
                            ],
                            "properties": {
                              "preference": {
                                "description": "A node selector term, associated with the corresponding weight.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "A list of node selector requirements by node's labels.",
                                    "type": "array",
                                    "items": {
                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "The label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "The label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                          "type": "string",
                                          "markdownDescription": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                        },
                                        "values": {
                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "A list of node selector requirements by node's labels."
                                  },
                                  "matchFields": {
                                    "description": "A list of node selector requirements by node's fields.",
                                    "type": "array",
                                    "items": {
                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "The label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "The label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                          "type": "string",
                                          "markdownDescription": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                        },
                                        "values": {
                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "A list of node selector requirements by node's fields."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "A node selector term, associated with the corresponding weight."
                              },
                              "weight": {
                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                "type": "integer",
                                "format": "int32",
                                "markdownDescription": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
                          },
                          "markdownDescription": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
                        },
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                          "type": "object",
                          "required": [
                            "nodeSelectorTerms"
                          ],
                          "properties": {
                            "nodeSelectorTerms": {
                              "description": "Required. A list of node selector terms. The terms are ORed.",
                              "type": "array",
                              "items": {
                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "A list of node selector requirements by node's labels.",
                                    "type": "array",
                                    "items": {
                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "The label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "The label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                          "type": "string",
                                          "markdownDescription": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                        },
                                        "values": {
                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "A list of node selector requirements by node's labels."
                                  },
                                  "matchFields": {
                                    "description": "A list of node selector requirements by node's fields.",
                                    "type": "array",
                                    "items": {
                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "The label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "The label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                          "type": "string",
                                          "markdownDescription": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                        },
                                        "values": {
                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "A list of node selector requirements by node's fields."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm."
                              },
                              "markdownDescription": "Required. A list of node selector terms. The terms are ORed."
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Describes node affinity scheduling rules for the pod."
                    },
                    "podAffinity": {
                      "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                      "type": "object",
                      "properties": {
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                          "type": "array",
                          "items": {
                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                            "type": "object",
                            "required": [
                              "podAffinityTerm",
                              "weight"
                            ],
                            "properties": {
                              "podAffinityTerm": {
                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                "type": "object",
                                "required": [
                                  "topologyKey"
                                ],
                                "properties": {
                                  "labelSelector": {
                                    "description": "A label query over a set of resources, in this case pods.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string",
                                              "markdownDescription": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string",
                                              "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                        },
                                        "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "markdownDescription": "A label query over a set of resources, in this case pods."
                                  },
                                  "namespaceSelector": {
                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string",
                                              "markdownDescription": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string",
                                              "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                        },
                                        "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "markdownDescription": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled."
                                  },
                                  "namespaces": {
                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\""
                                  },
                                  "topologyKey": {
                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                    "type": "string",
                                    "markdownDescription": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "Required. A pod affinity term, associated with the corresponding weight."
                              },
                              "weight": {
                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                "type": "integer",
                                "format": "int32",
                                "markdownDescription": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                          },
                          "markdownDescription": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                        },
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                          "type": "array",
                          "items": {
                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "key is the label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string",
                                          "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "A label query over a set of resources, in this case pods."
                              },
                              "namespaceSelector": {
                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "key is the label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string",
                                          "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled."
                              },
                              "namespaces": {
                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\""
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string",
                                "markdownDescription": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running"
                          },
                          "markdownDescription": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
                    },
                    "podAntiAffinity": {
                      "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                      "type": "object",
                      "properties": {
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                          "type": "array",
                          "items": {
                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                            "type": "object",
                            "required": [
                              "podAffinityTerm",
                              "weight"
                            ],
                            "properties": {
                              "podAffinityTerm": {
                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                "type": "object",
                                "required": [
                                  "topologyKey"
                                ],
                                "properties": {
                                  "labelSelector": {
                                    "description": "A label query over a set of resources, in this case pods.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string",
                                              "markdownDescription": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string",
                                              "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                        },
                                        "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "markdownDescription": "A label query over a set of resources, in this case pods."
                                  },
                                  "namespaceSelector": {
                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string",
                                              "markdownDescription": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string",
                                              "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                        },
                                        "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "markdownDescription": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled."
                                  },
                                  "namespaces": {
                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\""
                                  },
                                  "topologyKey": {
                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                    "type": "string",
                                    "markdownDescription": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "Required. A pod affinity term, associated with the corresponding weight."
                              },
                              "weight": {
                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                "type": "integer",
                                "format": "int32",
                                "markdownDescription": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
                          },
                          "markdownDescription": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
                        },
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                          "type": "array",
                          "items": {
                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "key is the label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string",
                                          "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "A label query over a set of resources, in this case pods."
                              },
                              "namespaceSelector": {
                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string",
                                          "markdownDescription": "key is the label key that the selector applies to."
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string",
                                          "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                    },
                                    "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled."
                              },
                              "namespaces": {
                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\""
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string",
                                "markdownDescription": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running"
                          },
                          "markdownDescription": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
                    }
                  },
                  "additionalProperties": false,
                  "markdownDescription": "If specified, the pod's scheduling constraints"
                },
                "automountServiceAccountToken": {
                  "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
                  "type": "boolean",
                  "markdownDescription": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
                },
                "dnsConfig": {
                  "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                  "type": "object",
                  "properties": {
                    "nameservers": {
                      "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed."
                    },
                    "options": {
                      "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
                      "type": "array",
                      "items": {
                        "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Required.",
                            "type": "string",
                            "markdownDescription": "Required."
                          },
                          "value": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "PodDNSConfigOption defines DNS resolver options of a pod."
                      },
                      "markdownDescription": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy."
                    },
                    "searches": {
                      "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed."
                    }
                  },
                  "additionalProperties": false,
                  "markdownDescription": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy."
                },
                "dnsPolicy": {
                  "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                  "type": "string",
                  "markdownDescription": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
                },
                "enableServiceLinks": {
                  "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
                  "type": "boolean",
                  "markdownDescription": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true."
                },
                "hostAliases": {
                  "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                  "type": "array",
                  "items": {
                    "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                    "type": "object",
                    "properties": {
                      "hostnames": {
                        "description": "Hostnames for the above IP address.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "Hostnames for the above IP address."
                      },
                      "ip": {
                        "description": "IP address of the host file entry.",
                        "type": "string",
                        "markdownDescription": "IP address of the host file entry."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file."
                  },
                  "markdownDescription": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods."
                },
                "hostIPC": {
                  "description": "Use the host's ipc namespace. Optional: Default to false.",
                  "type": "boolean",
                  "markdownDescription": "Use the host's ipc namespace. Optional: Default to false."
                },
                "hostNetwork": {
                  "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                  "type": "boolean",
                  "markdownDescription": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
                },
                "hostPID": {
                  "description": "Use the host's pid namespace. Optional: Default to false.",
                  "type": "boolean",
                  "markdownDescription": "Use the host's pid namespace. Optional: Default to false."
                },
                "hostname": {
                  "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                  "type": "string",
                  "markdownDescription": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
                },
                "imagePullSecrets": {
                  "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                  "type": "array",
                  "items": {
                    "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string",
                        "markdownDescription": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."
                  },
                  "markdownDescription": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod"
                },
                "nodeName": {
                  "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
                  "type": "string",
                  "markdownDescription": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
                },
                "nodeSelector": {
                  "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "markdownDescription": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
                },
                "overhead": {
                  "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  },
                  "markdownDescription": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature."
                },
                "preemptionPolicy": {
                  "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.",
                  "type": "string",
                  "markdownDescription": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate."
                },
                "priority": {
                  "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
                  "type": "integer",
                  "format": "int32",
                  "markdownDescription": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority."
                },
                "priorityClassName": {
                  "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
                  "type": "string",
                  "markdownDescription": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default."
                },
                "readinessGates": {
                  "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md",
                  "type": "array",
                  "items": {
                    "description": "PodReadinessGate contains the reference to a pod condition",
                    "type": "object",
                    "required": [
                      "conditionType"
                    ],
                    "properties": {
                      "conditionType": {
                        "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
                        "type": "string",
                        "markdownDescription": "ConditionType refers to a condition in the pod's condition list with matching type."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "PodReadinessGate contains the reference to a pod condition"
                  },
                  "markdownDescription": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md"
                },
                "runtimeClassName": {
                  "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
                  "type": "string",
                  "markdownDescription": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14."
                },
                "schedulerName": {
                  "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                  "type": "string",
                  "markdownDescription": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
                },
                "securityContext": {
                  "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                  "type": "object",
                  "properties": {
                    "fsGroup": {
                      "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                      "type": "integer",
                      "format": "int64",
                      "markdownDescription": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume."
                    },
                    "fsGroupChangePolicy": {
                      "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.",
                      "type": "string",
                      "markdownDescription": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used."
                    },
                    "runAsGroup": {
                      "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                      "type": "integer",
                      "format": "int64",
                      "markdownDescription": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
                    },
                    "runAsNonRoot": {
                      "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "boolean",
                      "markdownDescription": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
                    },
                    "runAsUser": {
                      "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                      "type": "integer",
                      "format": "int64",
                      "markdownDescription": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
                    },
                    "seLinuxOptions": {
                      "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                      "type": "object",
                      "properties": {
                        "level": {
                          "description": "Level is SELinux level label that applies to the container.",
                          "type": "string",
                          "markdownDescription": "Level is SELinux level label that applies to the container."
                        },
                        "role": {
                          "description": "Role is a SELinux role label that applies to the container.",
                          "type": "string",
                          "markdownDescription": "Role is a SELinux role label that applies to the container."
                        },
                        "type": {
                          "description": "Type is a SELinux type label that applies to the container.",
                          "type": "string",
                          "markdownDescription": "Type is a SELinux type label that applies to the container."
                        },
                        "user": {
                          "description": "User is a SELinux user label that applies to the container.",
                          "type": "string",
                          "markdownDescription": "User is a SELinux user label that applies to the container."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
                    },
                    "seccompProfile": {
                      "description": "The seccomp options to use by the containers in this pod.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "localhostProfile": {
                          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
                          "type": "string",
                          "markdownDescription": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\"."
                        },
                        "type": {
                          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                          "type": "string",
                          "markdownDescription": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "The seccomp options to use by the containers in this pod."
                    },
                    "supplementalGroups": {
                      "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "markdownDescription": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
                    },
                    "sysctls": {
                      "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                      "type": "array",
                      "items": {
                        "description": "Sysctl defines a kernel parameter to be set",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of a property to set",
                            "type": "string",
                            "markdownDescription": "Name of a property to set"
                          },
                          "value": {
                            "description": "Value of a property to set",
                            "type": "string",
                            "markdownDescription": "Value of a property to set"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Sysctl defines a kernel parameter to be set"
                      },
                      "markdownDescription": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch."
                    },
                    "windowsOptions": {
                      "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "object",
                      "properties": {
                        "gmsaCredentialSpec": {
                          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                          "type": "string",
                          "markdownDescription": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field."
                        },
                        "gmsaCredentialSpecName": {
                          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                          "type": "string",
                          "markdownDescription": "GMSACredentialSpecName is the name of the GMSA credential spec to use."
                        },
                        "runAsUserName": {
                          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                          "type": "string",
                          "markdownDescription": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
                    }
                  },
                  "additionalProperties": false,
                  "markdownDescription": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
                },
                "serviceAccountName": {
                  "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                  "type": "string",
                  "markdownDescription": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
                },
                "setHostnameAsFQDN": {
                  "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
                  "type": "boolean",
                  "markdownDescription": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false."
                },
                "shareProcessNamespace": {
                  "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
                  "type": "boolean",
                  "markdownDescription": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false."
                },
                "subdomain": {
                  "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all.",
                  "type": "string",
                  "markdownDescription": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all."
                },
                "terminationGracePeriodSeconds": {
                  "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
                  "type": "integer",
                  "format": "int64",
                  "markdownDescription": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds."
                },
                "tolerations": {
                  "description": "If specified, the pod's tolerations.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string",
                        "markdownDescription": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string",
                        "markdownDescription": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string",
                        "markdownDescription": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64",
                        "markdownDescription": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system."
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string",
                        "markdownDescription": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e."
                  },
                  "markdownDescription": "If specified, the pod's tolerations."
                },
                "topologySpreadConstraints": {
                  "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                    "type": "object",
                    "required": [
                      "maxSkew",
                      "topologyKey",
                      "whenUnsatisfiable"
                    ],
                    "properties": {
                      "labelSelector": {
                        "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string",
                                  "markdownDescription": "key is the label key that the selector applies to."
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string",
                                  "markdownDescription": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                            },
                            "markdownDescription": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "markdownDescription": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
                      },
                      "maxSkew": {
                        "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                        "type": "integer",
                        "format": "int32",
                        "markdownDescription": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed."
                      },
                      "topologyKey": {
                        "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
                        "type": "string",
                        "markdownDescription": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field."
                      },
                      "whenUnsatisfiable": {
                        "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assigment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                        "type": "string",
                        "markdownDescription": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assigment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "TopologySpreadConstraint specifies how to spread matching pods among the given topology."
                  },
                  "x-kubernetes-list-map-keys": [
                    "topologyKey",
                    "whenUnsatisfiable"
                  ],
                  "x-kubernetes-list-type": "map",
                  "markdownDescription": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed."
                }
              },
              "additionalProperties": false,
              "markdownDescription": "Subset of Pod Spec fields that can be overridden in a DevWorkspace's deployment"
            }
          },
          "additionalProperties": false,
          "markdownDescription": "Pod fields to override within the DevWorkspace's Deployment. Fields defined here are strategically merged on top of the Pod template in the deployment, allowing for fine-grained customization of the Pods that are started for this DevWorkspace."
        },
        "routingClass": {
          "type": "string"
        },
        "started": {
          "type": "boolean"
        },
        "template": {
          "description": "Structure of the devworkspace. This is also the specification of a devworkspace template.",
          "type": "object",
          "properties": {
            "attributes": {
              "description": "Map of implementation-dependant free-form YAML attributes.",
              "type": "object",
              "additionalProperties": true,
              "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
            },
            "commands": {
              "description": "Predefined, ready-to-use, devworkspace-related commands",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "oneOf": [
                  {
                    "required": [
                      "exec"
                    ]
                  },
                  {
                    "required": [
                      "apply"
                    ]
                  },
                  {
                    "required": [
                      "composite"
                    ]
                  },
                  {
                    "required": [
                      "custom"
                    ]
                  }
                ],
                "properties": {
                  "apply": {
                    "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                    "type": "object",
                    "required": [
                      "component"
                    ],
                    "properties": {
                      "component": {
                        "description": "Describes component that will be applied",
                        "type": "string",
                        "markdownDescription": "Describes component that will be applied"
                      },
                      "group": {
                        "description": "Defines the group this command is part of",
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "properties": {
                          "isDefault": {
                            "description": "Identifies the default command for a given group kind",
                            "type": "boolean",
                            "markdownDescription": "Identifies the default command for a given group kind"
                          },
                          "kind": {
                            "description": "Kind of group the command is part of",
                            "type": "string",
                            "enum": [
                              "build",
                              "run",
                              "test",
                              "debug",
                              "deploy"
                            ],
                            "markdownDescription": "Kind of group the command is part of"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Defines the group this command is part of"
                      },
                      "label": {
                        "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                        "type": "string",
                        "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."
                  },
                  "attributes": {
                    "description": "Map of implementation-dependant free-form YAML attributes.",
                    "type": "object",
                    "additionalProperties": true,
                    "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                  },
                  "composite": {
                    "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                    "type": "object",
                    "properties": {
                      "commands": {
                        "description": "The commands that comprise this composite command",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "The commands that comprise this composite command"
                      },
                      "group": {
                        "description": "Defines the group this command is part of",
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "properties": {
                          "isDefault": {
                            "description": "Identifies the default command for a given group kind",
                            "type": "boolean",
                            "markdownDescription": "Identifies the default command for a given group kind"
                          },
                          "kind": {
                            "description": "Kind of group the command is part of",
                            "type": "string",
                            "enum": [
                              "build",
                              "run",
                              "test",
                              "debug",
                              "deploy"
                            ],
                            "markdownDescription": "Kind of group the command is part of"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Defines the group this command is part of"
                      },
                      "label": {
                        "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                        "type": "string",
                        "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                      },
                      "parallel": {
                        "description": "Indicates if the sub-commands should be executed concurrently",
                        "type": "boolean",
                        "markdownDescription": "Indicates if the sub-commands should be executed concurrently"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Composite command that allows executing several sub-commands either sequentially or concurrently"
                  },
                  "custom": {
                    "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
                    "type": "object",
                    "required": [
                      "commandClass",
                      "embeddedResource"
                    ],
                    "properties": {
                      "commandClass": {
                        "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
                        "type": "string",
                        "markdownDescription": "Class of command that the associated implementation component should use to process this command with the appropriate logic"
                      },
                      "embeddedResource": {
                        "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
                        "type": "object",
                        "additionalProperties": true,
                        "markdownDescription": "Additional free-form configuration for this custom command that the implementation component will know how to use"
                      },
                      "group": {
                        "description": "Defines the group this command is part of",
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "properties": {
                          "isDefault": {
                            "description": "Identifies the default command for a given group kind",
                            "type": "boolean",
                            "markdownDescription": "Identifies the default command for a given group kind"
                          },
                          "kind": {
                            "description": "Kind of group the command is part of",
                            "type": "string",
                            "enum": [
                              "build",
                              "run",
                              "test",
                              "debug",
                              "deploy"
                            ],
                            "markdownDescription": "Kind of group the command is part of"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Defines the group this command is part of"
                      },
                      "label": {
                        "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                        "type": "string",
                        "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin"
                  },
                  "exec": {
                    "description": "CLI Command executed in an existing component container",
                    "type": "object",
                    "required": [
                      "commandLine",
                      "component"
                    ],
                    "properties": {
                      "commandLine": {
                        "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                        "type": "string",
                        "markdownDescription": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                      },
                      "component": {
                        "description": "Describes component to which given action relates",
                        "type": "string",
                        "markdownDescription": "Describes component to which given action relates"
                      },
                      "env": {
                        "description": "Optional list of environment variables that have to be set before running the command",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "value"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "markdownDescription": "Optional list of environment variables that have to be set before running the command"
                      },
                      "group": {
                        "description": "Defines the group this command is part of",
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "properties": {
                          "isDefault": {
                            "description": "Identifies the default command for a given group kind",
                            "type": "boolean",
                            "markdownDescription": "Identifies the default command for a given group kind"
                          },
                          "kind": {
                            "description": "Kind of group the command is part of",
                            "type": "string",
                            "enum": [
                              "build",
                              "run",
                              "test",
                              "debug",
                              "deploy"
                            ],
                            "markdownDescription": "Kind of group the command is part of"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Defines the group this command is part of"
                      },
                      "hotReloadCapable": {
                        "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`",
                        "type": "boolean",
                        "markdownDescription": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`"
                      },
                      "label": {
                        "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                        "type": "string",
                        "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                      },
                      "workingDir": {
                        "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                        "type": "string",
                        "markdownDescription": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "CLI Command executed in an existing component container"
                  },
                  "id": {
                    "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "markdownDescription": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."
                  }
                },
                "additionalProperties": false
              },
              "markdownDescription": "Predefined, ready-to-use, devworkspace-related commands"
            },
            "components": {
              "description": "List of the devworkspace components, such as editor and plugins, user-provided containers, or other types of components",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name"
                ],
                "oneOf": [
                  {
                    "required": [
                      "container"
                    ]
                  },
                  {
                    "required": [
                      "kubernetes"
                    ]
                  },
                  {
                    "required": [
                      "openshift"
                    ]
                  },
                  {
                    "required": [
                      "volume"
                    ]
                  },
                  {
                    "required": [
                      "image"
                    ]
                  },
                  {
                    "required": [
                      "plugin"
                    ]
                  },
                  {
                    "required": [
                      "custom"
                    ]
                  }
                ],
                "properties": {
                  "attributes": {
                    "description": "Map of implementation-dependant free-form YAML attributes.",
                    "type": "object",
                    "additionalProperties": true,
                    "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                  },
                  "container": {
                    "description": "Allows adding and configuring devworkspace-related containers",
                    "type": "object",
                    "required": [
                      "image"
                    ],
                    "properties": {
                      "annotation": {
                        "description": "Annotations that should be added to specific resources for this container",
                        "type": "object",
                        "properties": {
                          "deployment": {
                            "description": "Annotations to be added to deployment",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "markdownDescription": "Annotations to be added to deployment"
                          },
                          "service": {
                            "description": "Annotations to be added to service",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "markdownDescription": "Annotations to be added to service"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Annotations that should be added to specific resources for this container"
                      },
                      "args": {
                        "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                      },
                      "command": {
                        "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "markdownDescription": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                      },
                      "cpuLimit": {
                        "type": "string"
                      },
                      "cpuRequest": {
                        "type": "string"
                      },
                      "dedicatedPod": {
                        "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`",
                        "type": "boolean",
                        "markdownDescription": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"
                      },
                      "endpoints": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "targetPort"
                          ],
                          "properties": {
                            "annotation": {
                              "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                            },
                            "attributes": {
                              "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                              "type": "object",
                              "additionalProperties": true,
                              "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                            },
                            "exposure": {
                              "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                              "type": "string",
                              "enum": [
                                "public",
                                "internal",
                                "none"
                              ],
                              "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 63,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            },
                            "path": {
                              "description": "Path of the endpoint URL",
                              "type": "string",
                              "markdownDescription": "Path of the endpoint URL"
                            },
                            "protocol": {
                              "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                              "type": "string",
                              "enum": [
                                "http",
                                "https",
                                "ws",
                                "wss",
                                "tcp",
                                "udp"
                              ],
                              "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                            },
                            "secure": {
                              "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                              "type": "boolean",
                              "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                            },
                            "targetPort": {
                              "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                              "type": "integer",
                              "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "env": {
                        "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "value"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "markdownDescription": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"
                      },
                      "image": {
                        "type": "string"
                      },
                      "memoryLimit": {
                        "type": "string"
                      },
                      "memoryRequest": {
                        "type": "string"
                      },
                      "mountSources": {
                        "description": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                        "type": "boolean",
                        "markdownDescription": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."
                      },
                      "sourceMapping": {
                        "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                        "type": "string",
                        "markdownDescription": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."
                      },
                      "volumeMounts": {
                        "description": "List of volumes mounts that should be mounted is this container.",
                        "type": "array",
                        "items": {
                          "description": "Volume that should be mounted to a component container",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                              "type": "string",
                              "maxLength": 63,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                              "markdownDescription": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."
                            },
                            "path": {
                              "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`.",
                              "type": "string",
                              "markdownDescription": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`."
                            }
                          },
                          "additionalProperties": false,
                          "markdownDescription": "Volume that should be mounted to a component container"
                        },
                        "markdownDescription": "List of volumes mounts that should be mounted is this container."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Allows adding and configuring devworkspace-related containers"
                  },
                  "custom": {
                    "description": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller",
                    "type": "object",
                    "required": [
                      "componentClass",
                      "embeddedResource"
                    ],
                    "properties": {
                      "componentClass": {
                        "description": "Class of component that the associated implementation controller should use to process this command with the appropriate logic",
                        "type": "string",
                        "markdownDescription": "Class of component that the associated implementation controller should use to process this command with the appropriate logic"
                      },
                      "embeddedResource": {
                        "description": "Additional free-form configuration for this custom component that the implementation controller will know how to use",
                        "type": "object",
                        "additionalProperties": true,
                        "markdownDescription": "Additional free-form configuration for this custom component that the implementation controller will know how to use"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller"
                  },
                  "image": {
                    "description": "Allows specifying the definition of an image for outer loop builds",
                    "type": "object",
                    "required": [
                      "imageName"
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "dockerfile"
                        ]
                      }
                    ],
                    "properties": {
                      "autoBuild": {
                        "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                        "type": "boolean",
                        "markdownDescription": "Defines if the image should be built during startup.\n\nDefault value is `false`"
                      },
                      "dockerfile": {
                        "description": "Allows specifying dockerfile type build",
                        "type": "object",
                        "oneOf": [
                          {
                            "required": [
                              "uri"
                            ]
                          },
                          {
                            "required": [
                              "devfileRegistry"
                            ]
                          },
                          {
                            "required": [
                              "git"
                            ]
                          }
                        ],
                        "properties": {
                          "args": {
                            "description": "The arguments to supply to the dockerfile build.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "The arguments to supply to the dockerfile build."
                          },
                          "buildContext": {
                            "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                            "type": "string",
                            "markdownDescription": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"
                          },
                          "devfileRegistry": {
                            "description": "Dockerfile's Devfile Registry source",
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                "type": "string",
                                "markdownDescription": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."
                              },
                              "registryUrl": {
                                "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                "type": "string",
                                "markdownDescription": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Dockerfile's Devfile Registry source"
                          },
                          "git": {
                            "description": "Dockerfile's Git source",
                            "type": "object",
                            "required": [
                              "remotes"
                            ],
                            "properties": {
                              "checkoutFrom": {
                                "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                "type": "object",
                                "properties": {
                                  "remote": {
                                    "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                    "type": "string",
                                    "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                                  },
                                  "revision": {
                                    "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                    "type": "string",
                                    "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                              },
                              "fileLocation": {
                                "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                "type": "string",
                                "markdownDescription": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."
                              },
                              "remotes": {
                                "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Dockerfile's Git source"
                          },
                          "rootRequired": {
                            "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                            "type": "boolean",
                            "markdownDescription": "Specify if a privileged builder pod is required.\n\nDefault value is `false`"
                          },
                          "uri": {
                            "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                            "type": "string",
                            "markdownDescription": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows specifying dockerfile type build"
                      },
                      "imageName": {
                        "description": "Name of the image for the resulting outerloop build",
                        "type": "string",
                        "markdownDescription": "Name of the image for the resulting outerloop build"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Allows specifying the definition of an image for outer loop builds"
                  },
                  "kubernetes": {
                    "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                    "type": "object",
                    "oneOf": [
                      {
                        "required": [
                          "uri"
                        ]
                      },
                      {
                        "required": [
                          "inlined"
                        ]
                      }
                    ],
                    "properties": {
                      "deployByDefault": {
                        "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                        "type": "boolean",
                        "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                      },
                      "endpoints": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "targetPort"
                          ],
                          "properties": {
                            "annotation": {
                              "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                            },
                            "attributes": {
                              "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                              "type": "object",
                              "additionalProperties": true,
                              "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                            },
                            "exposure": {
                              "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                              "type": "string",
                              "enum": [
                                "public",
                                "internal",
                                "none"
                              ],
                              "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 63,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            },
                            "path": {
                              "description": "Path of the endpoint URL",
                              "type": "string",
                              "markdownDescription": "Path of the endpoint URL"
                            },
                            "protocol": {
                              "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                              "type": "string",
                              "enum": [
                                "http",
                                "https",
                                "ws",
                                "wss",
                                "tcp",
                                "udp"
                              ],
                              "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                            },
                            "secure": {
                              "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                              "type": "boolean",
                              "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                            },
                            "targetPort": {
                              "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                              "type": "integer",
                              "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "inlined": {
                        "description": "Inlined manifest",
                        "type": "string",
                        "markdownDescription": "Inlined manifest"
                      },
                      "uri": {
                        "description": "Location in a file fetched from a uri.",
                        "type": "string",
                        "markdownDescription": "Location in a file fetched from a uri."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."
                  },
                  "name": {
                    "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "markdownDescription": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."
                  },
                  "openshift": {
                    "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                    "type": "object",
                    "oneOf": [
                      {
                        "required": [
                          "uri"
                        ]
                      },
                      {
                        "required": [
                          "inlined"
                        ]
                      }
                    ],
                    "properties": {
                      "deployByDefault": {
                        "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                        "type": "boolean",
                        "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                      },
                      "endpoints": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "targetPort"
                          ],
                          "properties": {
                            "annotation": {
                              "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                            },
                            "attributes": {
                              "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                              "type": "object",
                              "additionalProperties": true,
                              "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                            },
                            "exposure": {
                              "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                              "type": "string",
                              "enum": [
                                "public",
                                "internal",
                                "none"
                              ],
                              "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 63,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            },
                            "path": {
                              "description": "Path of the endpoint URL",
                              "type": "string",
                              "markdownDescription": "Path of the endpoint URL"
                            },
                            "protocol": {
                              "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                              "type": "string",
                              "enum": [
                                "http",
                                "https",
                                "ws",
                                "wss",
                                "tcp",
                                "udp"
                              ],
                              "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                            },
                            "secure": {
                              "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                              "type": "boolean",
                              "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                            },
                            "targetPort": {
                              "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                              "type": "integer",
                              "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "inlined": {
                        "description": "Inlined manifest",
                        "type": "string",
                        "markdownDescription": "Inlined manifest"
                      },
                      "uri": {
                        "description": "Location in a file fetched from a uri.",
                        "type": "string",
                        "markdownDescription": "Location in a file fetched from a uri."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."
                  },
                  "plugin": {
                    "description": "Allows importing a plugin.\n\nPlugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
                    "type": "object",
                    "oneOf": [
                      {
                        "required": [
                          "uri"
                        ]
                      },
                      {
                        "required": [
                          "id"
                        ]
                      },
                      {
                        "required": [
                          "kubernetes"
                        ]
                      }
                    ],
                    "properties": {
                      "commands": {
                        "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "oneOf": [
                            {
                              "required": [
                                "exec"
                              ]
                            },
                            {
                              "required": [
                                "apply"
                              ]
                            },
                            {
                              "required": [
                                "composite"
                              ]
                            }
                          ],
                          "properties": {
                            "apply": {
                              "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                              "type": "object",
                              "properties": {
                                "component": {
                                  "description": "Describes component that will be applied",
                                  "type": "string",
                                  "markdownDescription": "Describes component that will be applied"
                                },
                                "group": {
                                  "description": "Defines the group this command is part of",
                                  "type": "object",
                                  "properties": {
                                    "isDefault": {
                                      "description": "Identifies the default command for a given group kind",
                                      "type": "boolean",
                                      "markdownDescription": "Identifies the default command for a given group kind"
                                    },
                                    "kind": {
                                      "description": "Kind of group the command is part of",
                                      "type": "string",
                                      "enum": [
                                        "build",
                                        "run",
                                        "test",
                                        "debug",
                                        "deploy"
                                      ],
                                      "markdownDescription": "Kind of group the command is part of"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Defines the group this command is part of"
                                },
                                "label": {
                                  "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                  "type": "string",
                                  "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."
                            },
                            "attributes": {
                              "description": "Map of implementation-dependant free-form YAML attributes.",
                              "type": "object",
                              "additionalProperties": true,
                              "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                            },
                            "composite": {
                              "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                              "type": "object",
                              "properties": {
                                "commands": {
                                  "description": "The commands that comprise this composite command",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "The commands that comprise this composite command"
                                },
                                "group": {
                                  "description": "Defines the group this command is part of",
                                  "type": "object",
                                  "properties": {
                                    "isDefault": {
                                      "description": "Identifies the default command for a given group kind",
                                      "type": "boolean",
                                      "markdownDescription": "Identifies the default command for a given group kind"
                                    },
                                    "kind": {
                                      "description": "Kind of group the command is part of",
                                      "type": "string",
                                      "enum": [
                                        "build",
                                        "run",
                                        "test",
                                        "debug",
                                        "deploy"
                                      ],
                                      "markdownDescription": "Kind of group the command is part of"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Defines the group this command is part of"
                                },
                                "label": {
                                  "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                  "type": "string",
                                  "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                                },
                                "parallel": {
                                  "description": "Indicates if the sub-commands should be executed concurrently",
                                  "type": "boolean",
                                  "markdownDescription": "Indicates if the sub-commands should be executed concurrently"
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Composite command that allows executing several sub-commands either sequentially or concurrently"
                            },
                            "exec": {
                              "description": "CLI Command executed in an existing component container",
                              "type": "object",
                              "properties": {
                                "commandLine": {
                                  "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                                  "type": "string",
                                  "markdownDescription": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                                },
                                "component": {
                                  "description": "Describes component to which given action relates",
                                  "type": "string",
                                  "markdownDescription": "Describes component to which given action relates"
                                },
                                "env": {
                                  "description": "Optional list of environment variables that have to be set before running the command",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "markdownDescription": "Optional list of environment variables that have to be set before running the command"
                                },
                                "group": {
                                  "description": "Defines the group this command is part of",
                                  "type": "object",
                                  "properties": {
                                    "isDefault": {
                                      "description": "Identifies the default command for a given group kind",
                                      "type": "boolean",
                                      "markdownDescription": "Identifies the default command for a given group kind"
                                    },
                                    "kind": {
                                      "description": "Kind of group the command is part of",
                                      "type": "string",
                                      "enum": [
                                        "build",
                                        "run",
                                        "test",
                                        "debug",
                                        "deploy"
                                      ],
                                      "markdownDescription": "Kind of group the command is part of"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Defines the group this command is part of"
                                },
                                "hotReloadCapable": {
                                  "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`",
                                  "type": "boolean",
                                  "markdownDescription": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`"
                                },
                                "label": {
                                  "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                  "type": "string",
                                  "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                                },
                                "workingDir": {
                                  "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                                  "type": "string",
                                  "markdownDescription": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "CLI Command executed in an existing component container"
                            },
                            "id": {
                              "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                              "type": "string",
                              "maxLength": 63,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                              "markdownDescription": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."
                            }
                          },
                          "additionalProperties": false
                        },
                        "markdownDescription": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
                      },
                      "components": {
                        "description": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "oneOf": [
                            {
                              "required": [
                                "container"
                              ]
                            },
                            {
                              "required": [
                                "kubernetes"
                              ]
                            },
                            {
                              "required": [
                                "openshift"
                              ]
                            },
                            {
                              "required": [
                                "volume"
                              ]
                            },
                            {
                              "required": [
                                "image"
                              ]
                            }
                          ],
                          "properties": {
                            "attributes": {
                              "description": "Map of implementation-dependant free-form YAML attributes.",
                              "type": "object",
                              "additionalProperties": true,
                              "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                            },
                            "container": {
                              "description": "Allows adding and configuring devworkspace-related containers",
                              "type": "object",
                              "properties": {
                                "annotation": {
                                  "description": "Annotations that should be added to specific resources for this container",
                                  "type": "object",
                                  "properties": {
                                    "deployment": {
                                      "description": "Annotations to be added to deployment",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "markdownDescription": "Annotations to be added to deployment"
                                    },
                                    "service": {
                                      "description": "Annotations to be added to service",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "markdownDescription": "Annotations to be added to service"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Annotations that should be added to specific resources for this container"
                                },
                                "args": {
                                  "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                                },
                                "command": {
                                  "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                                },
                                "cpuLimit": {
                                  "type": "string"
                                },
                                "cpuRequest": {
                                  "type": "string"
                                },
                                "dedicatedPod": {
                                  "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`",
                                  "type": "boolean",
                                  "markdownDescription": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"
                                },
                                "endpoints": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "annotation": {
                                        "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                      },
                                      "attributes": {
                                        "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                        "type": "object",
                                        "additionalProperties": true,
                                        "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                      },
                                      "exposure": {
                                        "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                        "type": "string",
                                        "enum": [
                                          "public",
                                          "internal",
                                          "none"
                                        ],
                                        "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                      },
                                      "name": {
                                        "type": "string",
                                        "maxLength": 63,
                                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                      },
                                      "path": {
                                        "description": "Path of the endpoint URL",
                                        "type": "string",
                                        "markdownDescription": "Path of the endpoint URL"
                                      },
                                      "protocol": {
                                        "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                        "type": "string",
                                        "enum": [
                                          "http",
                                          "https",
                                          "ws",
                                          "wss",
                                          "tcp",
                                          "udp"
                                        ],
                                        "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                      },
                                      "secure": {
                                        "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                        "type": "boolean",
                                        "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                      },
                                      "targetPort": {
                                        "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                        "type": "integer",
                                        "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "env": {
                                  "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "markdownDescription": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"
                                },
                                "image": {
                                  "type": "string"
                                },
                                "memoryLimit": {
                                  "type": "string"
                                },
                                "memoryRequest": {
                                  "type": "string"
                                },
                                "mountSources": {
                                  "description": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                                  "type": "boolean",
                                  "markdownDescription": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."
                                },
                                "sourceMapping": {
                                  "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                                  "type": "string",
                                  "markdownDescription": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."
                                },
                                "volumeMounts": {
                                  "description": "List of volumes mounts that should be mounted is this container.",
                                  "type": "array",
                                  "items": {
                                    "description": "Volume that should be mounted to a component container",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                                        "type": "string",
                                        "maxLength": 63,
                                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                        "markdownDescription": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."
                                      },
                                      "path": {
                                        "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`.",
                                        "type": "string",
                                        "markdownDescription": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "markdownDescription": "Volume that should be mounted to a component container"
                                  },
                                  "markdownDescription": "List of volumes mounts that should be mounted is this container."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Allows adding and configuring devworkspace-related containers"
                            },
                            "image": {
                              "description": "Allows specifying the definition of an image for outer loop builds",
                              "type": "object",
                              "oneOf": [
                                {
                                  "required": [
                                    "dockerfile"
                                  ]
                                },
                                {
                                  "required": [
                                    "autoBuild"
                                  ]
                                }
                              ],
                              "properties": {
                                "autoBuild": {
                                  "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                                  "type": "boolean",
                                  "markdownDescription": "Defines if the image should be built during startup.\n\nDefault value is `false`"
                                },
                                "dockerfile": {
                                  "description": "Allows specifying dockerfile type build",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "required": [
                                        "uri"
                                      ]
                                    },
                                    {
                                      "required": [
                                        "devfileRegistry"
                                      ]
                                    },
                                    {
                                      "required": [
                                        "git"
                                      ]
                                    }
                                  ],
                                  "properties": {
                                    "args": {
                                      "description": "The arguments to supply to the dockerfile build.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "markdownDescription": "The arguments to supply to the dockerfile build."
                                    },
                                    "buildContext": {
                                      "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                      "type": "string",
                                      "markdownDescription": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"
                                    },
                                    "devfileRegistry": {
                                      "description": "Dockerfile's Devfile Registry source",
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                          "type": "string",
                                          "markdownDescription": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."
                                        },
                                        "registryUrl": {
                                          "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                          "type": "string",
                                          "markdownDescription": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Dockerfile's Devfile Registry source"
                                    },
                                    "git": {
                                      "description": "Dockerfile's Git source",
                                      "type": "object",
                                      "properties": {
                                        "checkoutFrom": {
                                          "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                          "type": "object",
                                          "properties": {
                                            "remote": {
                                              "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                              "type": "string",
                                              "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                                            },
                                            "revision": {
                                              "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                              "type": "string",
                                              "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                                        },
                                        "fileLocation": {
                                          "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                          "type": "string",
                                          "markdownDescription": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."
                                        },
                                        "remotes": {
                                          "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Dockerfile's Git source"
                                    },
                                    "rootRequired": {
                                      "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                                      "type": "boolean",
                                      "markdownDescription": "Specify if a privileged builder pod is required.\n\nDefault value is `false`"
                                    },
                                    "uri": {
                                      "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                                      "type": "string",
                                      "markdownDescription": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Allows specifying dockerfile type build"
                                },
                                "imageName": {
                                  "description": "Name of the image for the resulting outerloop build",
                                  "type": "string",
                                  "markdownDescription": "Name of the image for the resulting outerloop build"
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Allows specifying the definition of an image for outer loop builds"
                            },
                            "kubernetes": {
                              "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "required": [
                                    "uri"
                                  ]
                                },
                                {
                                  "required": [
                                    "inlined"
                                  ]
                                }
                              ],
                              "properties": {
                                "deployByDefault": {
                                  "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                                  "type": "boolean",
                                  "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                                },
                                "endpoints": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "annotation": {
                                        "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                      },
                                      "attributes": {
                                        "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                        "type": "object",
                                        "additionalProperties": true,
                                        "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                      },
                                      "exposure": {
                                        "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                        "type": "string",
                                        "enum": [
                                          "public",
                                          "internal",
                                          "none"
                                        ],
                                        "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                      },
                                      "name": {
                                        "type": "string",
                                        "maxLength": 63,
                                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                      },
                                      "path": {
                                        "description": "Path of the endpoint URL",
                                        "type": "string",
                                        "markdownDescription": "Path of the endpoint URL"
                                      },
                                      "protocol": {
                                        "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                        "type": "string",
                                        "enum": [
                                          "http",
                                          "https",
                                          "ws",
                                          "wss",
                                          "tcp",
                                          "udp"
                                        ],
                                        "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                      },
                                      "secure": {
                                        "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                        "type": "boolean",
                                        "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                      },
                                      "targetPort": {
                                        "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                        "type": "integer",
                                        "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "inlined": {
                                  "description": "Inlined manifest",
                                  "type": "string",
                                  "markdownDescription": "Inlined manifest"
                                },
                                "uri": {
                                  "description": "Location in a file fetched from a uri.",
                                  "type": "string",
                                  "markdownDescription": "Location in a file fetched from a uri."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."
                            },
                            "name": {
                              "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                              "type": "string",
                              "maxLength": 63,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                              "markdownDescription": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."
                            },
                            "openshift": {
                              "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "required": [
                                    "uri"
                                  ]
                                },
                                {
                                  "required": [
                                    "inlined"
                                  ]
                                }
                              ],
                              "properties": {
                                "deployByDefault": {
                                  "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                                  "type": "boolean",
                                  "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                                },
                                "endpoints": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "annotation": {
                                        "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                      },
                                      "attributes": {
                                        "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                        "type": "object",
                                        "additionalProperties": true,
                                        "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                      },
                                      "exposure": {
                                        "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                        "type": "string",
                                        "enum": [
                                          "public",
                                          "internal",
                                          "none"
                                        ],
                                        "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                      },
                                      "name": {
                                        "type": "string",
                                        "maxLength": 63,
                                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                      },
                                      "path": {
                                        "description": "Path of the endpoint URL",
                                        "type": "string",
                                        "markdownDescription": "Path of the endpoint URL"
                                      },
                                      "protocol": {
                                        "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                        "type": "string",
                                        "enum": [
                                          "http",
                                          "https",
                                          "ws",
                                          "wss",
                                          "tcp",
                                          "udp"
                                        ],
                                        "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                      },
                                      "secure": {
                                        "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                        "type": "boolean",
                                        "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                      },
                                      "targetPort": {
                                        "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                        "type": "integer",
                                        "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "inlined": {
                                  "description": "Inlined manifest",
                                  "type": "string",
                                  "markdownDescription": "Inlined manifest"
                                },
                                "uri": {
                                  "description": "Location in a file fetched from a uri.",
                                  "type": "string",
                                  "markdownDescription": "Location in a file fetched from a uri."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."
                            },
                            "volume": {
                              "description": "Allows specifying the definition of a volume shared by several other components",
                              "type": "object",
                              "properties": {
                                "ephemeral": {
                                  "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                                  "type": "boolean",
                                  "markdownDescription": "Ephemeral volumes are not stored persistently across restarts. Defaults to false"
                                },
                                "size": {
                                  "description": "Size of the volume",
                                  "type": "string",
                                  "markdownDescription": "Size of the volume"
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Allows specifying the definition of a volume shared by several other components"
                            }
                          },
                          "additionalProperties": false
                        },
                        "markdownDescription": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
                      },
                      "id": {
                        "description": "Id in a registry that contains a Devfile yaml file",
                        "type": "string",
                        "markdownDescription": "Id in a registry that contains a Devfile yaml file"
                      },
                      "kubernetes": {
                        "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate"
                      },
                      "registryUrl": {
                        "description": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.",
                        "type": "string",
                        "markdownDescription": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."
                      },
                      "uri": {
                        "description": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.",
                        "type": "string",
                        "markdownDescription": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI."
                      },
                      "version": {
                        "description": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.",
                        "type": "string",
                        "pattern": "^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$",
                        "markdownDescription": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Allows importing a plugin.\n\nPlugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources"
                  },
                  "volume": {
                    "description": "Allows specifying the definition of a volume shared by several other components",
                    "type": "object",
                    "properties": {
                      "ephemeral": {
                        "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                        "type": "boolean",
                        "markdownDescription": "Ephemeral volumes are not stored persistently across restarts. Defaults to false"
                      },
                      "size": {
                        "description": "Size of the volume",
                        "type": "string",
                        "markdownDescription": "Size of the volume"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Allows specifying the definition of a volume shared by several other components"
                  }
                },
                "additionalProperties": false
              },
              "markdownDescription": "List of the devworkspace components, such as editor and plugins, user-provided containers, or other types of components"
            },
            "events": {
              "description": "Bindings of commands to events. Each command is referred-to by its name.",
              "type": "object",
              "properties": {
                "postStart": {
                  "description": "IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser."
                },
                "postStop": {
                  "description": "IDs of commands that should be executed after stopping the devworkspace.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "IDs of commands that should be executed after stopping the devworkspace."
                },
                "preStart": {
                  "description": "IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD."
                },
                "preStop": {
                  "description": "IDs of commands that should be executed before stopping the devworkspace.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "IDs of commands that should be executed before stopping the devworkspace."
                }
              },
              "additionalProperties": false,
              "markdownDescription": "Bindings of commands to events. Each command is referred-to by its name."
            },
            "parent": {
              "description": "Parent devworkspace template",
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "uri"
                  ]
                },
                {
                  "required": [
                    "id"
                  ]
                },
                {
                  "required": [
                    "kubernetes"
                  ]
                }
              ],
              "properties": {
                "attributes": {
                  "description": "Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.",
                  "type": "object",
                  "additionalProperties": true,
                  "markdownDescription": "Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."
                },
                "commands": {
                  "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id"
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "exec"
                        ]
                      },
                      {
                        "required": [
                          "apply"
                        ]
                      },
                      {
                        "required": [
                          "composite"
                        ]
                      }
                    ],
                    "properties": {
                      "apply": {
                        "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                        "type": "object",
                        "properties": {
                          "component": {
                            "description": "Describes component that will be applied",
                            "type": "string",
                            "markdownDescription": "Describes component that will be applied"
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean",
                                "markdownDescription": "Identifies the default command for a given group kind"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ],
                                "markdownDescription": "Kind of group the command is part of"
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines the group this command is part of"
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": "string",
                            "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."
                      },
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "type": "object",
                        "additionalProperties": true,
                        "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                      },
                      "composite": {
                        "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                        "type": "object",
                        "properties": {
                          "commands": {
                            "description": "The commands that comprise this composite command",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "The commands that comprise this composite command"
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean",
                                "markdownDescription": "Identifies the default command for a given group kind"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ],
                                "markdownDescription": "Kind of group the command is part of"
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines the group this command is part of"
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": "string",
                            "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                          },
                          "parallel": {
                            "description": "Indicates if the sub-commands should be executed concurrently",
                            "type": "boolean",
                            "markdownDescription": "Indicates if the sub-commands should be executed concurrently"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Composite command that allows executing several sub-commands either sequentially or concurrently"
                      },
                      "exec": {
                        "description": "CLI Command executed in an existing component container",
                        "type": "object",
                        "properties": {
                          "commandLine": {
                            "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                            "type": "string",
                            "markdownDescription": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                          },
                          "component": {
                            "description": "Describes component to which given action relates",
                            "type": "string",
                            "markdownDescription": "Describes component to which given action relates"
                          },
                          "env": {
                            "description": "Optional list of environment variables that have to be set before running the command",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "markdownDescription": "Optional list of environment variables that have to be set before running the command"
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean",
                                "markdownDescription": "Identifies the default command for a given group kind"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ],
                                "markdownDescription": "Kind of group the command is part of"
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines the group this command is part of"
                          },
                          "hotReloadCapable": {
                            "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`",
                            "type": "boolean",
                            "markdownDescription": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`"
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": "string",
                            "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                          },
                          "workingDir": {
                            "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                            "type": "string",
                            "markdownDescription": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "CLI Command executed in an existing component container"
                      },
                      "id": {
                        "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "markdownDescription": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."
                      }
                    },
                    "additionalProperties": false
                  },
                  "markdownDescription": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
                },
                "components": {
                  "description": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "container"
                        ]
                      },
                      {
                        "required": [
                          "kubernetes"
                        ]
                      },
                      {
                        "required": [
                          "openshift"
                        ]
                      },
                      {
                        "required": [
                          "volume"
                        ]
                      },
                      {
                        "required": [
                          "image"
                        ]
                      },
                      {
                        "required": [
                          "plugin"
                        ]
                      }
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "type": "object",
                        "additionalProperties": true,
                        "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                      },
                      "container": {
                        "description": "Allows adding and configuring devworkspace-related containers",
                        "type": "object",
                        "properties": {
                          "annotation": {
                            "description": "Annotations that should be added to specific resources for this container",
                            "type": "object",
                            "properties": {
                              "deployment": {
                                "description": "Annotations to be added to deployment",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "markdownDescription": "Annotations to be added to deployment"
                              },
                              "service": {
                                "description": "Annotations to be added to service",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "markdownDescription": "Annotations to be added to service"
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Annotations that should be added to specific resources for this container"
                          },
                          "args": {
                            "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                          },
                          "command": {
                            "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                          },
                          "cpuLimit": {
                            "type": "string"
                          },
                          "cpuRequest": {
                            "type": "string"
                          },
                          "dedicatedPod": {
                            "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`",
                            "type": "boolean",
                            "markdownDescription": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"
                          },
                          "endpoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "type": "object",
                                  "additionalProperties": true,
                                  "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                  "type": "string",
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ],
                                  "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": "string",
                                  "markdownDescription": "Path of the endpoint URL"
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ],
                                  "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                  "type": "boolean",
                                  "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                  "type": "integer",
                                  "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "env": {
                            "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "markdownDescription": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"
                          },
                          "image": {
                            "type": "string"
                          },
                          "memoryLimit": {
                            "type": "string"
                          },
                          "memoryRequest": {
                            "type": "string"
                          },
                          "mountSources": {
                            "description": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                            "type": "boolean",
                            "markdownDescription": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."
                          },
                          "sourceMapping": {
                            "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                            "type": "string",
                            "markdownDescription": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."
                          },
                          "volumeMounts": {
                            "description": "List of volumes mounts that should be mounted is this container.",
                            "type": "array",
                            "items": {
                              "description": "Volume that should be mounted to a component container",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                  "markdownDescription": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."
                                },
                                "path": {
                                  "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`.",
                                  "type": "string",
                                  "markdownDescription": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`."
                                }
                              },
                              "additionalProperties": false,
                              "markdownDescription": "Volume that should be mounted to a component container"
                            },
                            "markdownDescription": "List of volumes mounts that should be mounted is this container."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows adding and configuring devworkspace-related containers"
                      },
                      "image": {
                        "description": "Allows specifying the definition of an image for outer loop builds",
                        "type": "object",
                        "oneOf": [
                          {
                            "required": [
                              "dockerfile"
                            ]
                          },
                          {
                            "required": [
                              "autoBuild"
                            ]
                          }
                        ],
                        "properties": {
                          "autoBuild": {
                            "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                            "type": "boolean",
                            "markdownDescription": "Defines if the image should be built during startup.\n\nDefault value is `false`"
                          },
                          "dockerfile": {
                            "description": "Allows specifying dockerfile type build",
                            "type": "object",
                            "oneOf": [
                              {
                                "required": [
                                  "uri"
                                ]
                              },
                              {
                                "required": [
                                  "devfileRegistry"
                                ]
                              },
                              {
                                "required": [
                                  "git"
                                ]
                              }
                            ],
                            "properties": {
                              "args": {
                                "description": "The arguments to supply to the dockerfile build.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "markdownDescription": "The arguments to supply to the dockerfile build."
                              },
                              "buildContext": {
                                "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                "type": "string",
                                "markdownDescription": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"
                              },
                              "devfileRegistry": {
                                "description": "Dockerfile's Devfile Registry source",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                    "type": "string",
                                    "markdownDescription": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."
                                  },
                                  "registryUrl": {
                                    "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                    "type": "string",
                                    "markdownDescription": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "Dockerfile's Devfile Registry source"
                              },
                              "git": {
                                "description": "Dockerfile's Git source",
                                "type": "object",
                                "properties": {
                                  "checkoutFrom": {
                                    "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                    "type": "object",
                                    "properties": {
                                      "remote": {
                                        "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                        "type": "string",
                                        "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                                      },
                                      "revision": {
                                        "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                        "type": "string",
                                        "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                                  },
                                  "fileLocation": {
                                    "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                    "type": "string",
                                    "markdownDescription": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."
                                  },
                                  "remotes": {
                                    "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                                  }
                                },
                                "additionalProperties": false,
                                "markdownDescription": "Dockerfile's Git source"
                              },
                              "rootRequired": {
                                "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                                "type": "boolean",
                                "markdownDescription": "Specify if a privileged builder pod is required.\n\nDefault value is `false`"
                              },
                              "uri": {
                                "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                                "type": "string",
                                "markdownDescription": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Allows specifying dockerfile type build"
                          },
                          "imageName": {
                            "description": "Name of the image for the resulting outerloop build",
                            "type": "string",
                            "markdownDescription": "Name of the image for the resulting outerloop build"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows specifying the definition of an image for outer loop builds"
                      },
                      "kubernetes": {
                        "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                        "type": "object",
                        "oneOf": [
                          {
                            "required": [
                              "uri"
                            ]
                          },
                          {
                            "required": [
                              "inlined"
                            ]
                          }
                        ],
                        "properties": {
                          "deployByDefault": {
                            "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                            "type": "boolean",
                            "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                          },
                          "endpoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "type": "object",
                                  "additionalProperties": true,
                                  "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                  "type": "string",
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ],
                                  "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": "string",
                                  "markdownDescription": "Path of the endpoint URL"
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ],
                                  "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                  "type": "boolean",
                                  "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                  "type": "integer",
                                  "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "inlined": {
                            "description": "Inlined manifest",
                            "type": "string",
                            "markdownDescription": "Inlined manifest"
                          },
                          "uri": {
                            "description": "Location in a file fetched from a uri.",
                            "type": "string",
                            "markdownDescription": "Location in a file fetched from a uri."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."
                      },
                      "name": {
                        "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "markdownDescription": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."
                      },
                      "openshift": {
                        "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                        "type": "object",
                        "oneOf": [
                          {
                            "required": [
                              "uri"
                            ]
                          },
                          {
                            "required": [
                              "inlined"
                            ]
                          }
                        ],
                        "properties": {
                          "deployByDefault": {
                            "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                            "type": "boolean",
                            "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                          },
                          "endpoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "type": "object",
                                  "additionalProperties": true,
                                  "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                  "type": "string",
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ],
                                  "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": "string",
                                  "markdownDescription": "Path of the endpoint URL"
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ],
                                  "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                  "type": "boolean",
                                  "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                  "type": "integer",
                                  "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "inlined": {
                            "description": "Inlined manifest",
                            "type": "string",
                            "markdownDescription": "Inlined manifest"
                          },
                          "uri": {
                            "description": "Location in a file fetched from a uri.",
                            "type": "string",
                            "markdownDescription": "Location in a file fetched from a uri."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."
                      },
                      "plugin": {
                        "description": "Allows importing a plugin.\n\nPlugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
                        "type": "object",
                        "oneOf": [
                          {
                            "required": [
                              "uri"
                            ]
                          },
                          {
                            "required": [
                              "id"
                            ]
                          },
                          {
                            "required": [
                              "kubernetes"
                            ]
                          }
                        ],
                        "properties": {
                          "commands": {
                            "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "oneOf": [
                                {
                                  "required": [
                                    "exec"
                                  ]
                                },
                                {
                                  "required": [
                                    "apply"
                                  ]
                                },
                                {
                                  "required": [
                                    "composite"
                                  ]
                                }
                              ],
                              "properties": {
                                "apply": {
                                  "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                                  "type": "object",
                                  "properties": {
                                    "component": {
                                      "description": "Describes component that will be applied",
                                      "type": "string",
                                      "markdownDescription": "Describes component that will be applied"
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": "object",
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": "boolean",
                                          "markdownDescription": "Identifies the default command for a given group kind"
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": "string",
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ],
                                          "markdownDescription": "Kind of group the command is part of"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Defines the group this command is part of"
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                      "type": "string",
                                      "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant free-form YAML attributes.",
                                  "type": "object",
                                  "additionalProperties": true,
                                  "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                                },
                                "composite": {
                                  "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                                  "type": "object",
                                  "properties": {
                                    "commands": {
                                      "description": "The commands that comprise this composite command",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "markdownDescription": "The commands that comprise this composite command"
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": "object",
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": "boolean",
                                          "markdownDescription": "Identifies the default command for a given group kind"
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": "string",
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ],
                                          "markdownDescription": "Kind of group the command is part of"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Defines the group this command is part of"
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                      "type": "string",
                                      "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                                    },
                                    "parallel": {
                                      "description": "Indicates if the sub-commands should be executed concurrently",
                                      "type": "boolean",
                                      "markdownDescription": "Indicates if the sub-commands should be executed concurrently"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Composite command that allows executing several sub-commands either sequentially or concurrently"
                                },
                                "exec": {
                                  "description": "CLI Command executed in an existing component container",
                                  "type": "object",
                                  "properties": {
                                    "commandLine": {
                                      "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                                      "type": "string",
                                      "markdownDescription": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                                    },
                                    "component": {
                                      "description": "Describes component to which given action relates",
                                      "type": "string",
                                      "markdownDescription": "Describes component to which given action relates"
                                    },
                                    "env": {
                                      "description": "Optional list of environment variables that have to be set before running the command",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "markdownDescription": "Optional list of environment variables that have to be set before running the command"
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": "object",
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": "boolean",
                                          "markdownDescription": "Identifies the default command for a given group kind"
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": "string",
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ],
                                          "markdownDescription": "Kind of group the command is part of"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Defines the group this command is part of"
                                    },
                                    "hotReloadCapable": {
                                      "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`",
                                      "type": "boolean",
                                      "markdownDescription": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own.\n\nDefault value is `false`"
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                      "type": "string",
                                      "markdownDescription": "Optional label that provides a label for this command to be used in Editor UI menus for example"
                                    },
                                    "workingDir": {
                                      "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one.",
                                      "type": "string",
                                      "markdownDescription": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/\u003cproject-name\u003e). If there are multiple projects, this will point to the directory of the first one."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "CLI Command executed in an existing component container"
                                },
                                "id": {
                                  "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                  "markdownDescription": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."
                                }
                              },
                              "additionalProperties": false
                            },
                            "markdownDescription": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
                          },
                          "components": {
                            "description": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "oneOf": [
                                {
                                  "required": [
                                    "container"
                                  ]
                                },
                                {
                                  "required": [
                                    "kubernetes"
                                  ]
                                },
                                {
                                  "required": [
                                    "openshift"
                                  ]
                                },
                                {
                                  "required": [
                                    "volume"
                                  ]
                                },
                                {
                                  "required": [
                                    "image"
                                  ]
                                }
                              ],
                              "properties": {
                                "attributes": {
                                  "description": "Map of implementation-dependant free-form YAML attributes.",
                                  "type": "object",
                                  "additionalProperties": true,
                                  "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                                },
                                "container": {
                                  "description": "Allows adding and configuring devworkspace-related containers",
                                  "type": "object",
                                  "properties": {
                                    "annotation": {
                                      "description": "Annotations that should be added to specific resources for this container",
                                      "type": "object",
                                      "properties": {
                                        "deployment": {
                                          "description": "Annotations to be added to deployment",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "Annotations to be added to deployment"
                                        },
                                        "service": {
                                          "description": "Annotations to be added to service",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "Annotations to be added to service"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Annotations that should be added to specific resources for this container"
                                    },
                                    "args": {
                                      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "markdownDescription": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                                    },
                                    "command": {
                                      "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "markdownDescription": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."
                                    },
                                    "cpuLimit": {
                                      "type": "string"
                                    },
                                    "cpuRequest": {
                                      "type": "string"
                                    },
                                    "dedicatedPod": {
                                      "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`",
                                      "type": "boolean",
                                      "markdownDescription": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"
                                    },
                                    "endpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            },
                                            "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                            "type": "string",
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ],
                                            "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": "string",
                                            "markdownDescription": "Path of the endpoint URL"
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                            "type": "string",
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ],
                                            "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                            "type": "boolean",
                                            "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                            "type": "integer",
                                            "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "env": {
                                      "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "markdownDescription": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"
                                    },
                                    "image": {
                                      "type": "string"
                                    },
                                    "memoryLimit": {
                                      "type": "string"
                                    },
                                    "memoryRequest": {
                                      "type": "string"
                                    },
                                    "mountSources": {
                                      "description": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                                      "type": "boolean",
                                      "markdownDescription": "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."
                                    },
                                    "sourceMapping": {
                                      "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                                      "type": "string",
                                      "markdownDescription": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."
                                    },
                                    "volumeMounts": {
                                      "description": "List of volumes mounts that should be mounted is this container.",
                                      "type": "array",
                                      "items": {
                                        "description": "Volume that should be mounted to a component container",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                            "markdownDescription": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."
                                          },
                                          "path": {
                                            "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`.",
                                            "type": "string",
                                            "markdownDescription": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/\u003cname\u003e`."
                                          }
                                        },
                                        "additionalProperties": false,
                                        "markdownDescription": "Volume that should be mounted to a component container"
                                      },
                                      "markdownDescription": "List of volumes mounts that should be mounted is this container."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Allows adding and configuring devworkspace-related containers"
                                },
                                "image": {
                                  "description": "Allows specifying the definition of an image for outer loop builds",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "required": [
                                        "dockerfile"
                                      ]
                                    },
                                    {
                                      "required": [
                                        "autoBuild"
                                      ]
                                    }
                                  ],
                                  "properties": {
                                    "autoBuild": {
                                      "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                                      "type": "boolean",
                                      "markdownDescription": "Defines if the image should be built during startup.\n\nDefault value is `false`"
                                    },
                                    "dockerfile": {
                                      "description": "Allows specifying dockerfile type build",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "required": [
                                            "uri"
                                          ]
                                        },
                                        {
                                          "required": [
                                            "devfileRegistry"
                                          ]
                                        },
                                        {
                                          "required": [
                                            "git"
                                          ]
                                        }
                                      ],
                                      "properties": {
                                        "args": {
                                          "description": "The arguments to supply to the dockerfile build.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "markdownDescription": "The arguments to supply to the dockerfile build."
                                        },
                                        "buildContext": {
                                          "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                          "type": "string",
                                          "markdownDescription": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"
                                        },
                                        "devfileRegistry": {
                                          "description": "Dockerfile's Devfile Registry source",
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                              "type": "string",
                                              "markdownDescription": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."
                                            },
                                            "registryUrl": {
                                              "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                              "type": "string",
                                              "markdownDescription": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "Dockerfile's Devfile Registry source"
                                        },
                                        "git": {
                                          "description": "Dockerfile's Git source",
                                          "type": "object",
                                          "properties": {
                                            "checkoutFrom": {
                                              "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                              "type": "object",
                                              "properties": {
                                                "remote": {
                                                  "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                                  "type": "string",
                                                  "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                                                },
                                                "revision": {
                                                  "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                                  "type": "string",
                                                  "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                                                }
                                              },
                                              "additionalProperties": false,
                                              "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                                            },
                                            "fileLocation": {
                                              "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                              "type": "string",
                                              "markdownDescription": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."
                                            },
                                            "remotes": {
                                              "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "markdownDescription": "Dockerfile's Git source"
                                        },
                                        "rootRequired": {
                                          "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                                          "type": "boolean",
                                          "markdownDescription": "Specify if a privileged builder pod is required.\n\nDefault value is `false`"
                                        },
                                        "uri": {
                                          "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                                          "type": "string",
                                          "markdownDescription": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "markdownDescription": "Allows specifying dockerfile type build"
                                    },
                                    "imageName": {
                                      "description": "Name of the image for the resulting outerloop build",
                                      "type": "string",
                                      "markdownDescription": "Name of the image for the resulting outerloop build"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Allows specifying the definition of an image for outer loop builds"
                                },
                                "kubernetes": {
                                  "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "required": [
                                        "uri"
                                      ]
                                    },
                                    {
                                      "required": [
                                        "inlined"
                                      ]
                                    }
                                  ],
                                  "properties": {
                                    "deployByDefault": {
                                      "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                                      "type": "boolean",
                                      "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                                    },
                                    "endpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            },
                                            "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                            "type": "string",
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ],
                                            "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": "string",
                                            "markdownDescription": "Path of the endpoint URL"
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                            "type": "string",
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ],
                                            "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                            "type": "boolean",
                                            "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                            "type": "integer",
                                            "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "inlined": {
                                      "description": "Inlined manifest",
                                      "type": "string",
                                      "markdownDescription": "Inlined manifest"
                                    },
                                    "uri": {
                                      "description": "Location in a file fetched from a uri.",
                                      "type": "string",
                                      "markdownDescription": "Location in a file fetched from a uri."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."
                                },
                                "name": {
                                  "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                                  "markdownDescription": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."
                                },
                                "openshift": {
                                  "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "required": [
                                        "uri"
                                      ]
                                    },
                                    {
                                      "required": [
                                        "inlined"
                                      ]
                                    }
                                  ],
                                  "properties": {
                                    "deployByDefault": {
                                      "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                                      "type": "boolean",
                                      "markdownDescription": "Defines if the component should be deployed during startup.\n\nDefault value is `false`"
                                    },
                                    "endpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            },
                                            "markdownDescription": "Annotations to be added to Kubernetes Ingress or Openshift Route"
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "markdownDescription": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                            "type": "string",
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ],
                                            "markdownDescription": "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": "string",
                                            "markdownDescription": "Path of the endpoint URL"
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                            "type": "string",
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ],
                                            "markdownDescription": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                            "type": "boolean",
                                            "markdownDescription": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                            "type": "integer",
                                            "markdownDescription": "Port number to be used within the container component. The same port cannot be used by two different container components."
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "inlined": {
                                      "description": "Inlined manifest",
                                      "type": "string",
                                      "markdownDescription": "Inlined manifest"
                                    },
                                    "uri": {
                                      "description": "Location in a file fetched from a uri.",
                                      "type": "string",
                                      "markdownDescription": "Location in a file fetched from a uri."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."
                                },
                                "volume": {
                                  "description": "Allows specifying the definition of a volume shared by several other components",
                                  "type": "object",
                                  "properties": {
                                    "ephemeral": {
                                      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                                      "type": "boolean",
                                      "markdownDescription": "Ephemeral volumes are not stored persistently across restarts. Defaults to false"
                                    },
                                    "size": {
                                      "description": "Size of the volume",
                                      "type": "string",
                                      "markdownDescription": "Size of the volume"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "markdownDescription": "Allows specifying the definition of a volume shared by several other components"
                                }
                              },
                              "additionalProperties": false
                            },
                            "markdownDescription": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
                          },
                          "id": {
                            "description": "Id in a registry that contains a Devfile yaml file",
                            "type": "string",
                            "markdownDescription": "Id in a registry that contains a Devfile yaml file"
                          },
                          "kubernetes": {
                            "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate"
                          },
                          "registryUrl": {
                            "description": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.",
                            "type": "string",
                            "markdownDescription": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."
                          },
                          "uri": {
                            "description": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.",
                            "type": "string",
                            "markdownDescription": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI."
                          },
                          "version": {
                            "description": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.",
                            "type": "string",
                            "pattern": "^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$",
                            "markdownDescription": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows importing a plugin.\n\nPlugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources"
                      },
                      "volume": {
                        "description": "Allows specifying the definition of a volume shared by several other components",
                        "type": "object",
                        "properties": {
                          "ephemeral": {
                            "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                            "type": "boolean",
                            "markdownDescription": "Ephemeral volumes are not stored persistently across restarts. Defaults to false"
                          },
                          "size": {
                            "description": "Size of the volume",
                            "type": "string",
                            "markdownDescription": "Size of the volume"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Allows specifying the definition of a volume shared by several other components"
                      }
                    },
                    "additionalProperties": false
                  },
                  "markdownDescription": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."
                },
                "id": {
                  "description": "Id in a registry that contains a Devfile yaml file",
                  "type": "string",
                  "markdownDescription": "Id in a registry that contains a Devfile yaml file"
                },
                "kubernetes": {
                  "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "namespace": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "markdownDescription": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate"
                },
                "projects": {
                  "description": "Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "git"
                        ]
                      },
                      {
                        "required": [
                          "zip"
                        ]
                      }
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "type": "object",
                        "additionalProperties": true,
                        "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                      },
                      "clonePath": {
                        "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
                        "type": "string",
                        "markdownDescription": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": "object",
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": "object",
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": "string",
                                "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                "type": "string",
                                "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Project's Git source"
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "markdownDescription": "Project name"
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": "object",
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": "string",
                            "markdownDescription": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Project's Zip source"
                      }
                    },
                    "additionalProperties": false
                  },
                  "markdownDescription": "Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."
                },
                "registryUrl": {
                  "description": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.",
                  "type": "string",
                  "markdownDescription": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."
                },
                "starterProjects": {
                  "description": "Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "git"
                        ]
                      },
                      {
                        "required": [
                          "zip"
                        ]
                      }
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "type": "object",
                        "additionalProperties": true,
                        "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                      },
                      "description": {
                        "description": "Description of a starter project",
                        "type": "string",
                        "markdownDescription": "Description of a starter project"
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": "object",
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": "object",
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": "string",
                                "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                "type": "string",
                                "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Project's Git source"
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "markdownDescription": "Project name"
                      },
                      "subDir": {
                        "description": "Sub-directory from a starter project to be used as root for starter project.",
                        "type": "string",
                        "markdownDescription": "Sub-directory from a starter project to be used as root for starter project."
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": "object",
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": "string",
                            "markdownDescription": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Project's Zip source"
                      }
                    },
                    "additionalProperties": false
                  },
                  "markdownDescription": "Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."
                },
                "uri": {
                  "description": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.",
                  "type": "string",
                  "markdownDescription": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI."
                },
                "variables": {
                  "description": "Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "markdownDescription": "Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."
                },
                "version": {
                  "description": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.",
                  "type": "string",
                  "pattern": "^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$",
                  "markdownDescription": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."
                }
              },
              "additionalProperties": false,
              "markdownDescription": "Parent devworkspace template"
            },
            "projects": {
              "description": "Projects worked on in the devworkspace, containing names and sources locations",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name"
                ],
                "oneOf": [
                  {
                    "required": [
                      "git"
                    ]
                  },
                  {
                    "required": [
                      "zip"
                    ]
                  },
                  {
                    "required": [
                      "custom"
                    ]
                  }
                ],
                "properties": {
                  "attributes": {
                    "description": "Map of implementation-dependant free-form YAML attributes.",
                    "type": "object",
                    "additionalProperties": true,
                    "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                  },
                  "clonePath": {
                    "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
                    "type": "string",
                    "markdownDescription": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."
                  },
                  "custom": {
                    "description": "Project's Custom source",
                    "type": "object",
                    "required": [
                      "embeddedResource",
                      "projectSourceClass"
                    ],
                    "properties": {
                      "embeddedResource": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "projectSourceClass": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Project's Custom source"
                  },
                  "git": {
                    "description": "Project's Git source",
                    "type": "object",
                    "required": [
                      "remotes"
                    ],
                    "properties": {
                      "checkoutFrom": {
                        "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                        "type": "object",
                        "properties": {
                          "remote": {
                            "description": "The remote name should be used as init. Required if there are more than one remote configured",
                            "type": "string",
                            "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                          },
                          "revision": {
                            "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                            "type": "string",
                            "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                      },
                      "remotes": {
                        "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Project's Git source"
                  },
                  "name": {
                    "description": "Project name",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "markdownDescription": "Project name"
                  },
                  "zip": {
                    "description": "Project's Zip source",
                    "type": "object",
                    "properties": {
                      "location": {
                        "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                        "type": "string",
                        "markdownDescription": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Project's Zip source"
                  }
                },
                "additionalProperties": false
              },
              "markdownDescription": "Projects worked on in the devworkspace, containing names and sources locations"
            },
            "starterProjects": {
              "description": "StarterProjects is a project that can be used as a starting point when bootstrapping new projects",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name"
                ],
                "oneOf": [
                  {
                    "required": [
                      "git"
                    ]
                  },
                  {
                    "required": [
                      "zip"
                    ]
                  },
                  {
                    "required": [
                      "custom"
                    ]
                  }
                ],
                "properties": {
                  "attributes": {
                    "description": "Map of implementation-dependant free-form YAML attributes.",
                    "type": "object",
                    "additionalProperties": true,
                    "markdownDescription": "Map of implementation-dependant free-form YAML attributes."
                  },
                  "custom": {
                    "description": "Project's Custom source",
                    "type": "object",
                    "required": [
                      "embeddedResource",
                      "projectSourceClass"
                    ],
                    "properties": {
                      "embeddedResource": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "projectSourceClass": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Project's Custom source"
                  },
                  "description": {
                    "description": "Description of a starter project",
                    "type": "string",
                    "markdownDescription": "Description of a starter project"
                  },
                  "git": {
                    "description": "Project's Git source",
                    "type": "object",
                    "required": [
                      "remotes"
                    ],
                    "properties": {
                      "checkoutFrom": {
                        "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                        "type": "object",
                        "properties": {
                          "remote": {
                            "description": "The remote name should be used as init. Required if there are more than one remote configured",
                            "type": "string",
                            "markdownDescription": "The remote name should be used as init. Required if there are more than one remote configured"
                          },
                          "revision": {
                            "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                            "type": "string",
                            "markdownDescription": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."
                          }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "Defines from what the project should be checked out. Required if there are more than one remote configured"
                      },
                      "remotes": {
                        "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "markdownDescription": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects \u0026 Image Component's Git source can only have at most one remote configured."
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Project's Git source"
                  },
                  "name": {
                    "description": "Project name",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "markdownDescription": "Project name"
                  },
                  "subDir": {
                    "description": "Sub-directory from a starter project to be used as root for starter project.",
                    "type": "string",
                    "markdownDescription": "Sub-directory from a starter project to be used as root for starter project."
                  },
                  "zip": {
                    "description": "Project's Zip source",
                    "type": "object",
                    "properties": {
                      "location": {
                        "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                        "type": "string",
                        "markdownDescription": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Project's Zip source"
                  }
                },
                "additionalProperties": false
              },
              "markdownDescription": "StarterProjects is a project that can be used as a starting point when bootstrapping new projects"
            },
            "variables": {
              "description": "Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}} to replace the corresponding value in string fields in the devfile. Replacement cannot be used for\n\n - schemaVersion, metadata, parent source\n\n - element identifiers, e.g. command id, component name, endpoint name, project name\n\n - references to identifiers, e.g. in events, a command's component, container's volume mount name\n\n - string enums, e.g. command group kind, endpoint exposure",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "markdownDescription": "Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}} to replace the corresponding value in string fields in the devfile. Replacement cannot be used for\n\n - schemaVersion, metadata, parent source\n\n - element identifiers, e.g. command id, component name, endpoint name, project name\n\n - references to identifiers, e.g. in events, a command's component, container's volume mount name\n\n - string enums, e.g. command group kind, endpoint exposure"
            }
          },
          "additionalProperties": false,
          "markdownDescription": "Structure of the devworkspace. This is also the specification of a devworkspace template."
        }
      },
      "additionalProperties": false,
      "markdownDescription": "DevWorkspaceSpec defines the desired state of DevWorkspace"
    },
    "status": {
      "description": "DevWorkspaceStatus defines the observed state of DevWorkspace",
      "type": "object",
      "required": [
        "devworkspaceId"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "DevWorkspaceCondition contains details for the current condition of this devworkspace.",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time",
                "markdownDescription": "Last time the condition transitioned from one status to another."
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": "string",
                "markdownDescription": "Human-readable message indicating details about last transition."
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": "string",
                "markdownDescription": "Unique, one-word, CamelCase reason for the condition's last transition."
              },
              "status": {
                "description": "Phase is the status of the condition. Can be True, False, Unknown.",
                "type": "string",
                "markdownDescription": "Phase is the status of the condition. Can be True, False, Unknown."
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": "string",
                "markdownDescription": "Type is the type of the condition."
              }
            },
            "additionalProperties": false,
            "markdownDescription": "DevWorkspaceCondition contains details for the current condition of this devworkspace."
          },
          "markdownDescription": "Conditions represent the latest available observations of an object's state"
        },
        "devworkspaceId": {
          "description": "Id of the DevWorkspace",
          "type": "string",
          "markdownDescription": "Id of the DevWorkspace"
        },
        "mainUrl": {
          "description": "Main URL for this DevWorkspace",
          "type": "string",
          "markdownDescription": "Main URL for this DevWorkspace"
        },
        "message": {
          "description": "Message is a short user-readable message giving additional information about an object's state",
          "type": "string",
          "markdownDescription": "Message is a short user-readable message giving additional information about an object's state"
        },
        "phase": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "DevWorkspaceStatus defines the observed state of DevWorkspace"
    }
  },
  "additionalProperties": false,
  "markdownDescription": "DevWorkspace is the Schema for the devworkspaces API\n\nIDE-targeted variants of the schemas provide the following difference compared to the main schemas:\n- They contain additional non-standard `markdownDescription` attributes that are used by IDEs such a VSCode\nto provide markdown-rendered documentation hovers. \n- They don't contain `default` attributes, since this triggers unwanted addition of defaulted fields during completion in IDEs."
}